// src/app/core/services/formation.service.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Formation, CreateFormationDto, FormationStats } from '../../shared/models/formation.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class FormationService {
  private readonly baseUrl = `${environment.apiUrl}/formations`;

  constructor(private http: HttpClient) {}

  // R√©cup√©rer toutes les formations
  getAllFormations(): Observable<Formation[]> {
    return this.http.get<Formation[]>(this.baseUrl);
  }

  // R√©cup√©rer une formation par ID
  getFormationById(id: number): Observable<Formation> {
    return this.http.get<Formation>(`${this.baseUrl}/${id}`);
  }

  // R√©cup√©rer les formations par cat√©gorie
  getFormationsByCategorie(categorie: string): Observable<Formation[]> {
    return this.http.get<Formation[]>(`${this.baseUrl}/categorie/${categorie}`);
  }

  // Rechercher des formations par mot-cl√©
  searchFormations(keyword: string): Observable<Formation[]> {
    const params = new HttpParams().set('keyword', keyword);
    return this.http.get<Formation[]>(`${this.baseUrl}/search`, { params });
  }

  // Compter le nombre de formations
  countFormations(): Observable<number> {
    return this.http.get<number>(`${this.baseUrl}/count`);
  }

  // Cr√©er une nouvelle formation
  createFormation(formation: CreateFormationDto): Observable<Formation> {
    return this.http.post<Formation>(this.baseUrl, formation);
  }

  // Mettre √† jour une formation
  updateFormation(id: number, formation: Partial<Formation>): Observable<Formation> {
    return this.http.put<Formation>(`${this.baseUrl}/${id}`, formation);
  }

  // Inscrire un √©tudiant √† une formation
  inscrireEtudiant(id: number): Observable<Formation> {
    return this.http.put<Formation>(`${this.baseUrl}/${id}/inscrire`, {});
  }

  // Supprimer une formation
  deleteFormation(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`);
  }

  // ‚úÖ CORRIG√â - Obtenir les statistiques r√©elles pour TOUS les niveaux universitaires
  getFormationStats(): Observable<FormationStats> {
    return new Observable(observer => {
      console.log('üìä D√©but du calcul des statistiques...');
      
      // R√©cup√©rer toutes les formations en une seule fois pour calculer les stats
      this.getAllFormations().subscribe({
        next: (formations) => {
          console.log(`üìã ${formations.length} formations r√©cup√©r√©es du backend`);
          
          // Calculer les statistiques pour toutes les cat√©gories
          const stats: FormationStats = {
            totalFormations: formations.filter(f => f.actif && f.disponible).length,
            
            // ‚úÖ BTS/DUT (Bac+2)
            formationsBTS: formations.filter(f => 
              f.categorie === 'bts_dut' && f.actif && f.disponible
            ).length,
            
            // ‚úÖ Licences (Bac+3) - Licence g√©n√©rale + Licence Pro
            formationsLicence: formations.filter(f => 
              (f.categorie === 'licence' || f.categorie === 'licence_pro') && f.actif && f.disponible
            ).length,
            
            // ‚úÖ Masters (Bac+5) - Master g√©n√©ral + Master Pro  
            formationsMaster: formations.filter(f => 
              (f.categorie === 'master' || f.categorie === 'master_pro') && f.actif && f.disponible
            ).length,
            
            // ‚úÖ MBA
            formationsMBA: formations.filter(f => 
              f.categorie === 'mba' && f.actif && f.disponible
            ).length,
            
            // ‚úÖ Doctorats (Bac+8)
            formationsDoctorat: formations.filter(f => 
              f.categorie === 'doctorat' && f.actif && f.disponible
            ).length,
            
            // ‚úÖ Certifications + Formation Continue
            formationsCertification: formations.filter(f => 
              (f.categorie === 'certification' || f.categorie === 'formation_continue') && f.actif && f.disponible
            ).length,
            
            // Taux d'insertion (√† adapter selon vos m√©triques r√©elles)
            tauxInsertion: 95
          };
          
          // Debug des statistiques calcul√©es
          console.log('üìä Statistiques calcul√©es par cat√©gorie:');
          console.log(`  üìö Total formations actives: ${stats.totalFormations}`);
          console.log(`  üéì BTS/DUT: ${stats.formationsBTS}`);
          console.log(`  üéì Licences: ${stats.formationsLicence}`);
          console.log(`  üéì Masters: ${stats.formationsMaster}`);
          console.log(`  üéì MBA: ${stats.formationsMBA}`);
          console.log(`  üéì Doctorats: ${stats.formationsDoctorat}`);
          console.log(`  üéì Certifications: ${stats.formationsCertification}`);
          console.log(`  üìà Taux insertion: ${stats.tauxInsertion}%`);
          
          observer.next(stats);
          observer.complete();
        },
        error: (error) => {
          console.error('‚ùå Erreur lors du calcul des statistiques:', error);
          
          // En cas d'erreur, retourner des stats par d√©faut
          const defaultStats: FormationStats = {
            totalFormations: 0,
            formationsBTS: 0,
            formationsLicence: 0,
            formationsMaster: 0,
            formationsMBA: 0,
            formationsDoctorat: 0,
            formationsCertification: 0,
            tauxInsertion: 95
          };
          
          observer.next(defaultStats);
          observer.complete();
        }
      });
    });
  }

  // ‚úÖ M√©thode utilitaire pour obtenir les formations par cat√©gories multiples
  getFormationsByCategories(categories: string[]): Observable<Formation[]> {
    return new Observable(observer => {
      this.getAllFormations().subscribe({
        next: (formations) => {
          const filtered = formations.filter(f => 
            categories.includes(f.categorie) && f.actif && f.disponible
          );
          observer.next(filtered);
          observer.complete();
        },
        error: (error) => {
          observer.error(error);
        }
      });
    });
  }

  // ‚úÖ M√©thode pour obtenir un r√©sum√© des cat√©gories disponibles
  getCategoriesSummary(): Observable<Array<{categorie: string, count: number, label: string}>> {
    return new Observable(observer => {
      this.getAllFormations().subscribe({
        next: (formations) => {
          const categoriesMap = new Map<string, number>();
          const labelMap = new Map<string, string>([
            ['bts_dut', 'BTS/DUT (Bac+2)'],
            ['licence', 'Licence (Bac+3)'],
            ['licence_pro', 'Licence Pro (Bac+3)'],
            ['master', 'Master (Bac+5)'],
            ['master_pro', 'Master Pro (Bac+5)'],
            ['mba', 'MBA'],
            ['doctorat', 'Doctorat (Bac+8)'],
            ['formation_continue', 'Formation Continue'],
            ['certification', 'Certification']
          ]);

          // Compter les formations par cat√©gorie
          formations.filter(f => f.actif && f.disponible).forEach(formation => {
            const count = categoriesMap.get(formation.categorie) || 0;
            categoriesMap.set(formation.categorie, count + 1);
          });

          // Convertir en tableau avec labels
          const summary = Array.from(categoriesMap.entries()).map(([categorie, count]) => ({
            categorie,
            count,
            label: labelMap.get(categorie) || categorie
          }));

          observer.next(summary);
          observer.complete();
        },
        error: (error) => {
          observer.error(error);
        }
      });
    });
  }
}